// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          String       @default("STUDENT")
  accounts      Account[]
  sessions      Session[]
  chatSessions  ChatSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chapter {
  id        Int       @id @default(autoincrement())
  title     String
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  passages  Passage[]
}

model Passage {
  id          Int          @id @default(autoincrement())
  chapterId   Int
  startIndex  Int
  endIndex    Int
  text        String       @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  chapter     Chapter      @relation(fields: [chapterId], references: [id])
  chatSessions ChatSession[]
  messages     ChatMessage[]
}

model ChatSession {
  id           Int          @id @default(autoincrement())
  userId       String
  passageId    Int
  questionTypes String[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id])
  passage      Passage      @relation(fields: [passageId], references: [id])
  messages     ChatMessage[]
}

model ChatMessage {
  id           Int          @id @default(autoincrement())
  sessionId    Int
  passageId    Int
  role         String       // "user" or "assistant"
  content      String       @db.Text
  tokenCount   Int
  questionType String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  session      ChatSession  @relation(fields: [sessionId], references: [id])
  passage      Passage      @relation(fields: [passageId], references: [id])
} 